/**
 * @name RCE in Log4j CVE-2021-44228
 * @description Like the default query, but with custom taint steps
 * @kind path-problem
 * @problem.severity error
 * @security-severity 6.1
 * @precision high
 * @id java/custom-xss
 * @tags security
 *       external/cwe/cwe-079
 */

import java
import semmle.code.java.dataflow.DataFlow
import semmle.code.java.dataflow.FlowSources
import semmle.code.java.dataflow.TaintTracking2
import DataFlow::PathGraph
import geekmasher.Logging

class Log4jErrors extends DataFlow::Node {
  Log4jErrors() {
    exists(MethodAccess ma |
      ma.getMethod().getDeclaringType() instanceof Log4jLoggerType and
      (
        ma.getMethod().hasName("error") or
        ma.getMethod().hasName("info") or
        ma.getMethod().hasName("debug") or
        ma.getMethod().hasName("trace") or
        ma.getMethod().hasName("debugf") or
        ma.getMethod().hasName("debugv")
      ) and
      // this.asExpr() = ma.getArgument(0)
      // Any argvs??
      this.asExpr() = ma.getAnArgument()
    )
  }
}

class Log4jConfig extends TaintTracking::Configuration {
  Log4jConfig() { this = "Log4jConfig" }

  override predicate isSource(DataFlow::Node source) { source instanceof RemoteFlowSource }

  override predicate isSink(DataFlow::Node sink) { sink instanceof Log4jErrors }
}

from DataFlow::PathNode source, DataFlow::PathNode sink, Log4jConfig conf
where conf.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "You are fu...", source.getNode(), "user-provided value"
